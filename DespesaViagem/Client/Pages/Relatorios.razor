@page "/relatorios"
@inject IJSRuntime JSRuntime
@inject IRelatoriosService RelatoriosService
@inject IViagemService ViagemService
@inject IDespesaService DespesaService
@inject IDespesasService<DespesaAlimentacaoDTO> DespesaAlimentacaoService
@inject IDespesasService<DespesaDeslocamentoDTO> DespesaDeslocamentoService
@inject IDespesasService<DespesaHospedagemDTO> DespesaHospedagemService
@inject IDespesasService<DespesaPassagemDTO> DespesaPassagemService
@attribute [Authorize(Roles = "Administrador, Gestor")]
@implements IDisposable


<div class="header">
    <h3>Relatórios</h3>
</div>
<!--
<div class="filters">
    <div class="filter">
        <label for="dataInicio">Data de Início:</label>
        <input type="date" id="dataInicio">
    </div>
    <div class="filter">
        <label for="dataFim">Data de Fim:</label>
        <input type="date" id="dataFim">
    </div>
</div>
-->
<div class="container-relatorio">
    <div class="relatorio">
        <button class="btn-relatorio" @onclick="(() => MostrarOpcoes(TiposRelatorios.Geral))">Relatório geral</button>

        <button class="btn-relatorio mx-2" @onclick="(() => MostrarOpcoes(TiposRelatorios.Viagens))">Relatório das viagens</button>

        <button class="btn-relatorio" @onclick="(() => MostrarOpcoes(TiposRelatorios.Despesas))">Relatório das despesas</button>
    </div>

</div>

@if (mostrarOpcaoRelatorioGeral)
{
    <div class="container-relatorio-opcoes">

        <div class="mt-2">
            <button class="btn btn-outline-secondary" @onclick="GerarRelatorioGeral">Gerar relatório</button>
        </div>
    </div>
}

@if (mostrarOpcaoRelatorioViagens)
{
    <div class="container-relatorio-opcoes">
        <div class="mt-2">
            <label for="viagensRelatorio">Estados das Viagens</label> <br />
            @foreach (var estado in EstadosViagem)
            {
                string apresentacao = estado.ToString() ?? string.Empty;
                @if ((StatusViagem)estado == StatusViagem.EmAndamento)
                {
                    apresentacao = "Em andamento";
                }

                <div class="form-check">
                    <input id="estado@(estado)" type="checkbox" class="form-check-input" @onchange="((e) => SelecionarEstadoViagem(e, (int)estado))">
                    <label class="form-check-label">@apresentacao</label>
                </div>
            }
            <div class="form-check">
                <input id="todosEstados" type="checkbox" class="form-check-input" @onchange="((e) => SelecionarEstadoViagem(e,-1))">
                <label class="form-check-label">Todos</label>
            </div>
        </div>
        @if (mostrarOpcaoRelatorioViagens && EstadosViagemSelecionados is not null && (EstadosViagemSelecionados.Any(e => e) || todosEstadosViagemSelecionado))
        {
            <div class="mt-2">
                <label for="viagensRelatorio">Viagens</label>
                <InputSelect id="viagens" class="form-select" @bind-Value="idViagemSelecionada">
                    <option value="0">Todas as viagens</option>
                    @foreach (var viagem in ViagemService.Viagens)
                    {
                        <option value="@viagem.Id">@viagem.NomeViagem</option>
                    }
                </InputSelect>
            </div>
        }
        <button class="btn btn-outline-secondary mt-3" style="float:right" @onclick="GerarRelatorioViagens">Gerar relatório</button>
    </div>

}

@if (mostrarOpcaoRelatorioDespesas)
{
    <div class="container-relatorio-opcoes">

        <div class="mt-2">
            <label for="viagensRelatorio">Viagens</label>
            <InputSelect id="viagens" class="form-select" @bind-Value="idViagemSelecionada">
                <option value="-1">Selecione</option>
                @foreach (var viagem in ViagemService.Viagens)
                {
                    <option value="@viagem.Id"> @viagem.NomeViagem </option>
                }
                <option value="0">Todas as viagens</option>
            </InputSelect>
        </div>

        @if (mostrarOpcaoRelatorioDespesas && idViagemSelecionada >= 0)
        {
            <div class="mt-2">
                <label for="despesasRelatorio">Tipos de Despesas</label> <br />
                @foreach (var tipoDespesa in TiposDasDespesas)
                {
                    <div class="form-check">
                        <input id="despesa@(tipoDespesa)" type="checkbox" class="form-check-input" @onchange="((e) => SelecionarTipoDespesa(e, (int)tipoDespesa))">
                        <label class="form-check-label">@tipoDespesa</label>
                    </div>
                }
                <div class="form-check">
                    <input id="todosTiposDespesa" type="checkbox" class="form-check-input" @onchange="((e) => SelecionarTipoDespesa(e,-1))">
                    <label class="form-check-label">Todos os tipos</label>
                </div>
            </div>
        }
        <button class="btn btn-outline-secondary mt-3" style="float:right" @onclick="GerarRelatorioDespesas">Gerar relatório</button>
    </div>
}

@code {
    private bool mostrarOpcaoRelatorioGeral = false;
    private bool mostrarOpcaoRelatorioViagens = false;
    private bool mostrarOpcaoRelatorioDespesas = false;

    private int idViagemSelecionada = 0;
    private bool todosEstadosViagemSelecionado = false;
    private bool todosTiposDespesaSelecionado = false;

    private Array EstadosViagem = Enum.GetValues(typeof(StatusViagem));
    private Array TiposDasDespesas = Enum.GetValues(typeof(TiposDespesas));
    private bool[]? EstadosViagemSelecionados;
    private bool[]? TiposDespesasSelecionados;


    protected override async Task OnInitializedAsync()
    {
        ViagemService.ViagensChanged += StateHasChanged;
        //DespesaAlimentacaoService.DespesasChanged += StateHasChanged;

        EstadosViagemSelecionados = new bool[EstadosViagem.Length];
        TiposDespesasSelecionados = new bool[TiposDasDespesas.Length];

        await ViagemService.GetViagens();
    }

    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
        //DespesaAlimentacaoService.DespesasChanged -= StateHasChanged;
    }



    private async Task MostrarOpcoes(TiposRelatorios tipo)
    {
        switch (tipo)
        {
            case TiposRelatorios.Geral:
                mostrarOpcaoRelatorioGeral = !mostrarOpcaoRelatorioGeral;
                mostrarOpcaoRelatorioViagens = false;
                mostrarOpcaoRelatorioDespesas = false;
                break;
            case TiposRelatorios.Viagens:
                mostrarOpcaoRelatorioGeral = false;
                mostrarOpcaoRelatorioViagens = !mostrarOpcaoRelatorioViagens;
                mostrarOpcaoRelatorioDespesas = false;
                await ResetFiltros();
                break;
            case TiposRelatorios.Despesas:
                mostrarOpcaoRelatorioGeral = false;
                mostrarOpcaoRelatorioViagens = false;
                mostrarOpcaoRelatorioDespesas = !mostrarOpcaoRelatorioDespesas;
                await ResetFiltros();
                break;
        }
    }

    private async Task ResetFiltros()
    {
        idViagemSelecionada = 0;
        await ViagemService.GetViagens();
    }

    private async Task SelecionarEstadoViagem(ChangeEventArgs e, int indice)
    {
        if (EstadosViagemSelecionados is null) return;

        if (indice >= 0 && indice < EstadosViagemSelecionados.Length)
        {
            EstadosViagemSelecionados[indice] = (bool)e.Value!;

            List<StatusViagem> listaStatus = new();

            for (int i = 0; i < EstadosViagemSelecionados.Length; i++)
            {
                StatusViagem estado = (StatusViagem)EstadosViagem.GetValue(i)!;

                if (EstadosViagemSelecionados[i])
                    listaStatus.Add(estado);
                else
                    listaStatus.Remove(estado);
            }
            await ViagemService.GetViagens(listaStatus);

        }
        else if (indice < 0)
        {
            todosEstadosViagemSelecionado = !todosEstadosViagemSelecionado;
            await JSRuntime.InvokeVoidAsync("mudarVisibilidadeCheckboxEstadosViagem");
            await ViagemService.GetViagens();
        }
    }

    private async Task SelecionarTipoDespesa(ChangeEventArgs e, int indice)
    {
        if (TiposDespesasSelecionados is null) return;

        if (indice >= 0 && indice < TiposDespesasSelecionados.Length)
        {
            TiposDespesasSelecionados[indice] = (bool)e.Value!;
        }
        else if (indice < 0)
        {
            todosTiposDespesaSelecionado = !todosTiposDespesaSelecionado;
            await JSRuntime.InvokeVoidAsync("mudarVisibilidadeCheckboxTiposDespesas");
            await ViagemService.GetViagens();
        }
    }


    private async Task GerarRelatorioGeral()
    {
        await ViagemService.GetViagens();
        List<DespesaDTO> despesas = await DespesaService.GetDespesas();

        RelatoriosService.GerarRelatorioExcel(JSRuntime, ViagemService.Viagens, despesas, "RelatorioGeral");
    }

    private async Task GerarRelatorioViagens()
    {
        List<ViagemDTO> viagens = idViagemSelecionada != 0 ? ViagemService.Viagens.Where(v => v.Id == idViagemSelecionada).ToList() : ViagemService.Viagens;

        RelatoriosService.GerarRelatorioExcel(JSRuntime, viagens, "RelatorioViagens");
    }

    private async Task GerarRelatorioDespesas()
    {
        if (TiposDespesasSelecionados is null) return;

        DespesasDTO despesas = new();

        if (todosTiposDespesaSelecionado)
            despesas = await ObterTodosTiposDespesas();
        else
        {
            List<TiposDespesas> tiposDespesas = new();

            for (int i = 0; i < TiposDespesasSelecionados.Length; i++)
            {
                TiposDespesas tipoDespesas = (TiposDespesas)TiposDasDespesas.GetValue(i)!;

                if (TiposDespesasSelecionados[i])
                    tiposDespesas.Add(tipoDespesas);
                else
                    tiposDespesas.Remove(tipoDespesas);
            }

            foreach (var tipo in tiposDespesas)
            {
                switch (tipo)
                {
                    case TiposDespesas.Alimentação:
                        despesas.DespesasAlimentacaoDTO = await ObterDespesasAlimentacao();
                        break;

                    case TiposDespesas.Deslocamento:
                        despesas.DespesasDeslocamentoDTO = await ObterDespesasDeslocamento();
                        break;

                    case TiposDespesas.Hospedagem:
                        despesas.DespesasHospedagemDTO = await ObterDespesasHospedagem();
                        break;

                    case TiposDespesas.Passagem:
                        despesas.DespesasPassagemDTO = await ObterDespesasPassagem();
                        break;
                }
            }
        }

        RelatoriosService.GerarRelatorioExcel(JSRuntime, ViagemService.Viagens, despesas, todosTiposDespesaSelecionado, "RelatorioDespesas");
    }

    private async Task<DespesasDTO> ObterTodosTiposDespesas()
    {
        DespesasDTO despesas = new();
        despesas.DespesasAlimentacaoDTO = await ObterDespesasAlimentacao();
        despesas.DespesasDeslocamentoDTO = await ObterDespesasDeslocamento();
        despesas.DespesasHospedagemDTO = await ObterDespesasHospedagem();
        despesas.DespesasPassagemDTO = await ObterDespesasPassagem();

        return despesas;
    }

    private async Task<List<DespesaAlimentacaoDTO>> ObterDespesasAlimentacao()
    {
        List<DespesaAlimentacaoDTO> despesas = new();
        Result<List<DespesaAlimentacaoDTO>> responseAlimentacaoService = await DespesaAlimentacaoService.GetDespesas();
        if (responseAlimentacaoService.IsFailure) await JSRuntime.InvokeVoidAsync("alert", responseAlimentacaoService.Error);
        despesas = idViagemSelecionada != 0 ? responseAlimentacaoService.Value.Where(d => d.IdViagem == idViagemSelecionada).ToList() : (responseAlimentacaoService.Value ?? new());
        if (despesas.Count == 0) await JSRuntime.InvokeVoidAsync("alert", "Nenhuma despesa com alimentação nessa viagem");

        return despesas;
    }
    private async Task<List<DespesaDeslocamentoDTO>> ObterDespesasDeslocamento()
    {
        List<DespesaDeslocamentoDTO> despesas = new();
        Result<List<DespesaDeslocamentoDTO>> responseDeslocamentoService = await DespesaDeslocamentoService.GetDespesas();
        if (responseDeslocamentoService.IsFailure) await JSRuntime.InvokeVoidAsync("alert", responseDeslocamentoService.Error);
        despesas = idViagemSelecionada != 0 ? responseDeslocamentoService.Value.Where(d => d.IdViagem == idViagemSelecionada).ToList() : (responseDeslocamentoService.Value ?? new());
        if (despesas.Count == 0) await JSRuntime.InvokeVoidAsync("alert", "Nenhuma despesa com deslocamento nessa viagem");

        return despesas;
    }
    private async Task<List<DespesaHospedagemDTO>> ObterDespesasHospedagem()
    {
        List<DespesaHospedagemDTO> despesas = new();
        Result<List<DespesaHospedagemDTO>> responseHospedagemService = await DespesaHospedagemService.GetDespesas();
        if (responseHospedagemService.IsFailure) await JSRuntime.InvokeVoidAsync("alert", responseHospedagemService.Error);
        despesas = idViagemSelecionada != 0 ? responseHospedagemService.Value.Where(d => d.IdViagem == idViagemSelecionada).ToList() : (responseHospedagemService.Value ?? new());
        if (despesas.Count == 0) await JSRuntime.InvokeVoidAsync("alert", "Nenhuma despesa com hospedagem nessa viagem");

        return despesas;
    }
    private async Task<List<DespesaPassagemDTO>> ObterDespesasPassagem()
    {
        List<DespesaPassagemDTO> despesas = new();
        Result<List<DespesaPassagemDTO>> responsePassagemService = await DespesaPassagemService.GetDespesas();
        if (responsePassagemService.IsFailure) await JSRuntime.InvokeVoidAsync("alert", responsePassagemService.Error);
        despesas = idViagemSelecionada != 0 ? responsePassagemService.Value.Where(d => d.IdViagem == idViagemSelecionada).ToList() : (responsePassagemService.Value ?? new());
        if (despesas.Count == 0) await JSRuntime.InvokeVoidAsync("alert", "Nenhuma despesa com passagem nessa viagem");

        return despesas;
    }
}
