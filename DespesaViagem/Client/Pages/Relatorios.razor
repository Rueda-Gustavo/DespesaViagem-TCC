@page "/relatorios"


@inject IJSRuntime JSRuntime
@inject IViagemService ViagemService
@attribute [Authorize(Roles = "Administrador, Gestor")]
@implements IDisposable


<div class="header">
    <h3>Relatórios</h3>
</div>
<!--
<div class="filters">
    <div class="filter">
        <label for="dataInicio">Data de Início:</label>
        <input type="date" id="dataInicio">
    </div>
    <div class="filter">
        <label for="dataFim">Data de Fim:</label>
        <input type="date" id="dataFim">
    </div>
</div>
-->
<div class="container-relatorio">
    <div class="relatorio">
        <button class="btn-relatorio" @onclick="(() => MostrarOpcoes(TiposRelatorios.Geral))">Relatório geral</button>

        <button class="btn-relatorio mx-2" @onclick="(() => MostrarOpcoes(TiposRelatorios.Viagens))">Relatório das viagens</button>

        <button class="btn-relatorio" @onclick="(() => MostrarOpcoes(TiposRelatorios.Despesas))">Relatório das despesas</button>
    </div>

</div>

@if (mostrarOpcaoRelatorioGeral)
{
    <div class="container-relatorio-opcoes">

        <div class="mt-2">
            <button class="btn btn-outline-secondary" @onclick="GerarRelatorioGeral">Gerar relatório</button>
        </div>
    </div>
}

@if (mostrarOpcaoRelatorioViagens)
{
    <div class="container-relatorio-opcoes">
        <div class="mt-2">
            <label for="viagensRelatorio">Estados das Viagens</label> <br />
            @foreach (var estado in EstadosViagem)
            {
                string apresentacao = estado.ToString() ?? string.Empty;
                @if((StatusViagem) estado == StatusViagem.EmAndamento)
                {
                    apresentacao = "Em andamento";
                }

                <div class="form-check">
                    <input id="estado@(estado)" type="checkbox" class="form-check-input" @onchange="((e) => SelecionarEstadoViagem(e, (int)estado))">
                    <label class="form-check-label">@apresentacao</label>
                </div>
            }
            <div class="form-check">
                <input id="todosEstados" type="checkbox" class="form-check-input" @onchange="((e) => SelecionarEstadoViagem(e,-1))">
                <label class="form-check-label">Todos</label>
            </div>
        </div>
        @if (mostrarOpcaoRelatorioViagens && EstadosViagemSelecionados is not null && (EstadosViagemSelecionados.Any(e => e) || todosEstadosViagemSelecionado))
        {
            <div class="mt-2">
                <label for="viagensRelatorio">Viagens</label>
                <InputSelect id="viagens" class="form-select" @bind-Value="idViagemSelecionada">
                    <option value="0">Selecione</option>
                    @foreach (var viagem in ViagemService.Viagens)
                    {
                        <option value="@viagem.Id"> @viagem.NomeViagem </option>
                    }
                    <option value="0">Todas as viagens</option>
                </InputSelect>
            </div>
        }
        <button class="btn btn-outline-secondary mt-3" style="float:right" @onclick="GerarRelatorioViagens">Gerar relatório</button>
    </div>

}

@if (mostrarOpcaoRelatorioDespesas)
{
    <div class="container-relatorio-opcoes">

        <div class="mt-2">
            <label for="viagensRelatorio">Viagens</label>
            <InputSelect id="viagens" class="form-select" @bind-Value="idViagemSelecionada">
                <option value="-1">Selecione</option>
                @foreach (var viagem in ViagemService.Viagens)
                {
                    <option value="@viagem.Id"> @viagem.NomeViagem </option>
                }
                <option value="0">Todas as viagens</option>
            </InputSelect>
        </div>

        @if (mostrarOpcaoRelatorioDespesas && idViagemSelecionada > 0)
        {
            <div class="mt-2">
                <label for="despesasRelatorio">Despesas</label>
                <InputSelect id="despesas" class="form-select" @bind-Value="tipoDespesaSelecionada">
                    <option value="-1" selected>Todos as despesas</option>
                    @foreach (var tipo in TiposDespesas)
                    {
                        <option value="@((int)tipo)"> @tipo </option>
                    }
                </InputSelect>
            </div>
        }
        <button class="btn btn-outline-secondary mt-3" style="float:right" @onclick="GerarRelatorioDespesas">Gerar relatório</button>
    </div>
}

@code {
    private bool mostrarOpcaoRelatorioGeral = false;
    private bool mostrarOpcaoRelatorioViagens = false;
    private bool mostrarOpcaoRelatorioDespesas = false;

    private int idViagemSelecionada = 0;
    private bool todosEstadosViagemSelecionado = false;
    private int tipoDespesaSelecionada;

    private Array EstadosViagem = Enum.GetValues(typeof(StatusViagem));
    private Array TiposDespesas = Enum.GetValues(typeof(TiposDespesas));
    private bool[]? EstadosViagemSelecionados;

    protected override async Task OnInitializedAsync()
    {
        ViagemService.ViagensChanged += StateHasChanged;

        EstadosViagemSelecionados = new bool[EstadosViagem.Length];

        await ViagemService.GetViagens();
    }

    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
    }



    private async Task MostrarOpcoes(TiposRelatorios tipo)
    {
        switch (tipo)
        {
            case TiposRelatorios.Geral:
                mostrarOpcaoRelatorioGeral = !mostrarOpcaoRelatorioGeral;
                mostrarOpcaoRelatorioViagens = false;
                mostrarOpcaoRelatorioDespesas = false;
                break;
            case TiposRelatorios.Viagens:
                mostrarOpcaoRelatorioGeral = false;
                mostrarOpcaoRelatorioViagens = !mostrarOpcaoRelatorioViagens;
                mostrarOpcaoRelatorioDespesas = false;
                await ResetFiltros();
                break;
            case TiposRelatorios.Despesas:
                mostrarOpcaoRelatorioGeral = false;
                mostrarOpcaoRelatorioViagens = false;
                mostrarOpcaoRelatorioDespesas = !mostrarOpcaoRelatorioDespesas;
                await ResetFiltros();
                break;
        }
    }

    private async Task ResetFiltros()
    {
        idViagemSelecionada = 0;
        await ViagemService.GetViagens();
    }

    private async Task SelecionarEstadoViagem(ChangeEventArgs e, int indice)
    {
        if (EstadosViagemSelecionados is null) return;

        if (indice >= 0 && indice < EstadosViagemSelecionados.Length)
        {
            EstadosViagemSelecionados[indice] = (bool)e.Value!;    

            List<StatusViagem> listaStatus = new();

            for (int i = 0; i < EstadosViagemSelecionados.Length; i++)
            {
                StatusViagem estado = (StatusViagem)EstadosViagem.GetValue(i)!;

                if (EstadosViagemSelecionados[i])
                    listaStatus.Add(estado);
                else
                    listaStatus.Remove(estado);
            }
            await ViagemService.GetViagens(listaStatus);

        }
        else if (indice < 0)
        {
            todosEstadosViagemSelecionado = !todosEstadosViagemSelecionado;
            await JSRuntime.InvokeVoidAsync("mudarVisibilidadeCheckboxEstadosViagem");
            await ViagemService.GetViagens();
        }
    }


    private async Task GerarRelatorioGeral()
    {
        RelatoriosService relatorio = new();
        await JSRuntime.InvokeAsync<ViagemDTO>(
            "salvarRelatorio",
            "RelatorioGeral.pdf",
            Convert.ToBase64String(relatorio.GerarRelatorio(ViagemService.Viagens))
        );
        //await JSRuntime.InvokeAsync<object>("salvarArquivo", "RelatorioGeral.pdf", string.Empty);
    }

    private async Task GerarRelatorioViagens()
    {
        //await JSRuntime.InvokeAsync<object>("salvarArquivo", "RelatorioViagens.pdf", string.Empty);

    }

    private async Task GerarRelatorioDespesas()
    {

        if (tipoDespesaSelecionada >= 0)
            TiposDespesas.GetValue(tipoDespesaSelecionada);

        //await JSRuntime.InvokeAsync<object>("salvarArquivo", "RelatorioDespesas.pdf", string.Empty);
    }
       
}
