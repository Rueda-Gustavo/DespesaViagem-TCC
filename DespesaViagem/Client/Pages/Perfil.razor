@page "/perfil"
@inject IUsuarioService UsuarioService
@attribute [Authorize]

<PageTitle>Perfil</PageTitle>


<div class="container-xl d-flex flex-column align-items-center flex-wrap">

    <AuthorizeView>
        <h3>Perfil</h3>

        <h3>Você está logado como <i>@context.User.Identity.Name</i></h3>
    </AuthorizeView>

    <h5>Trocar senha</h5>

    <EditForm Model="novaSenhaUsuario" OnValidSubmit="TrocarSenha" class="mb-2">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="password">Senha</label>
            <InputText id="password" @bind-Value="novaSenhaUsuario.Password" class="form-control" type="password"></InputText>
            <ValidationMessage For="@(() => novaSenhaUsuario.Password)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirmar senha</label>
            <InputText id="confirmPassword" @bind-Value="novaSenhaUsuario.ConfirmPassword" class="form-control" type="password"></InputText>
            <ValidationMessage For="@(() => novaSenhaUsuario.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary">Salvar</button>
    </EditForm>
    <span>@mensagem</span>
</div>
@code {
    TrocarSenhaUsuario novaSenhaUsuario = new();
    string mensagem = string.Empty;

    private async Task TrocarSenha()
    {
        var result = await UsuarioService.TrocarSenha(novaSenhaUsuario);
        mensagem = result.Mensagem;
    }
}
