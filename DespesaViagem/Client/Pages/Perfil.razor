@page "/perfil"
@inject IUsuarioService UsuarioService
@inject IFuncionarioService FuncionarioService
@inject IGestorService GestorService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<PageTitle>Perfil</PageTitle>

@if (usuario is null)
{
    <span>Carregando informações...</span>
}
else
{

    <div class="container-xl d-flex flex-column align-items-center flex-wrap">
        <AuthorizeView>
            <h3 class="my-5">Você está logado como <i>@context.User.Identity.Name</i></h3>
        </AuthorizeView>
        <form @onsubmit="HandlePerfilUsuario">
            <div class="form-group row">
                <div class="col">
                    <label for="Nome">Nome</label>
                    <input id="Nome" class="form-control" @bind-value="usuario.NomeCompleto" />
                </div>
                <div class="form-group row">

                    <div class="col-auto">
                        <label for="Username">Username</label>
                        <input id="Username" class="form-control" @bind-value="usuario.Username" />
                    </div>
                    @if (TipoDeUsuario != RolesUsuario.Administrador.ToString())
                    {
                        <div class="col-auto">
                            <label for="CPF">CPF</label>
                            <input id="CPF" class="form-control" @bind-value="usuario.CPF" />
                        </div>
                    }
                    @if (TipoDeUsuario == RolesUsuario.Funcionario.ToString())
                    {
                        <div class="col-auto">
                            <label for="Matricula">Matrícula</label>
                            <input id="Matricula" class="form-control" @bind-value="funcionario.Matricula" />
                        </div>
                    }
                </div>
            </div>
            <span>@mensagem</span>

            <div style="float:right;">
                <button type="button" class="btn btn-info" @onclick="AbrirTrocarSenha">
                    <span>Trocar senha</span>
                </button>
                <button type="submit" class="btn btn-primary">
                    <span>Salvar</span>
                </button>
            </div>
        </form>
    </div>
}

@if (FormularioTrocarSenhaAberto)
{
    <div class="modal-overlay" style="z-index:2000">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">
                    <span>Trocar senha</span>
                </h5>
                <button type="button" class="close" @onclick="FecharTrocarSenha">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <EditForm Model="novaSenhaUsuario" OnValidSubmit="TrocarSenha" class="mb-2">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="mb-3">
                    <label for="password">Senha</label>
                    <InputText id="password" @bind-Value="novaSenhaUsuario.Password" class="form-control" type="password"></InputText>
                    <ValidationMessage For="@(() => novaSenhaUsuario.Password)" />
                </div>
                <div class="mb-3">
                    <label for="confirmPassword">Confirmar senha</label>
                    <InputText id="confirmPassword" @bind-Value="novaSenhaUsuario.ConfirmPassword" class="form-control" type="password"></InputText>
                    <ValidationMessage For="@(() => novaSenhaUsuario.ConfirmPassword)" />
                </div>
                <div style="float:right;">
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            </EditForm>
        </div>
    </div>

}
@code {
    private TrocarSenhaUsuario novaSenhaUsuario = new();
    private string mensagem = string.Empty;

    private UsuarioDTO usuario = new();

    private FuncionarioDTO funcionario = new();

    private string TipoDeUsuario = string.Empty;

    private bool FormularioTrocarSenhaAberto = false;

    protected override async Task OnInitializedAsync()
    {
        FuncionarioService.FuncionariosChanged += StateHasChanged;
        GestorService.GestoresChanged += StateHasChanged;

        var responseTipoUsuario = await UsuarioService.ObterTipoUsuario();

        if (!responseTipoUsuario.Sucesso)
        {
            await JSRuntime.InvokeVoidAsync("alert", responseTipoUsuario.Mensagem);
        }
        else
        {
            await ObterUsuario(responseTipoUsuario.Conteudo);
        }
    }

    public void Dispose()
    {
        FuncionarioService.FuncionariosChanged -= StateHasChanged;
        GestorService.GestoresChanged -= StateHasChanged;

    }


    private async Task ObterUsuario(RolesUsuario tipoUsuario)
    {
        Console.WriteLine(tipoUsuario.ToString());
        AuthenticationState usuarioLogado = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimNameIdentifier = usuarioLogado.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        _ = int.TryParse(claimNameIdentifier, out int idUsuario);

        TipoDeUsuario = tipoUsuario.ToString();

        if (tipoUsuario == RolesUsuario.Funcionario)
            usuario = funcionario = await FuncionarioService.GetFuncionario(idUsuario);
        else if (tipoUsuario == RolesUsuario.Gestor)
            usuario = await GestorService.GetGestor(idUsuario);
        else
            //await JSRuntime.InvokeVoidAsync("alert", "Página de perfil do Administrador ainda não implementada");
            usuario = await UsuarioService.GetUsuario(idUsuario);

        /*
        string a = Usuario.NomeCompleto;

        await JSRuntime.InvokeVoidAsync("alert", a);
        */
    }

    private async Task HandlePerfilUsuario()
    {
        try
        {
            bool sucesso = false;
            if (TipoDeUsuario == RolesUsuario.Funcionario.ToString()){
                sucesso = (await FuncionarioService.AtualizarPerfil(funcionario)).IsSuccess;
                await JSRuntime.InvokeVoidAsync("alert", FuncionarioService.Mensagem);
            }
            else if (TipoDeUsuario == RolesUsuario.Gestor.ToString())
            {
                sucesso = (await GestorService.AtualizarPerfil((GestorDTO)usuario)).IsSuccess;
                await JSRuntime.InvokeVoidAsync("alert", GestorService.Mensagem);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Não é possível alterar o perfil do administrador.");
            }

            //await JSRuntime.InvokeVoidAsync("alert", "Dados salvos com sucesso!");

            if (sucesso) FecharTrocarSenha();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task TrocarSenha()
    {
        var result = await UsuarioService.TrocarSenha(novaSenhaUsuario);
        mensagem = result.Mensagem;
        await JSRuntime.InvokeVoidAsync("alert", result.Mensagem);
        FecharTrocarSenha();
    }

    private void AbrirTrocarSenha()
    {
        FormularioTrocarSenhaAberto = true;
    }

    private void FecharTrocarSenha()
    {
        FormularioTrocarSenhaAberto = false;
    }
}
