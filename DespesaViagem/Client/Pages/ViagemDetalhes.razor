@page "/viagens/{idViagem:int}/{pagina:int}"
@page "/viagens/{idViagem:int}/{pagina:int}/{tipoDespesa}"
@inject IViagemService ViagemService
@inject IFuncionarioService FuncionarioService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize]

<PageTitle>Detalhes</PageTitle>

<strong><span class="fs-4">Viagem: @Status</span></strong> 
<br/>

<a href="/viagens/1" class="btn btn-outline-primary mt-3">Voltar</a>

<button class="btn btn-primary d-xl-none m-3" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasResponsive" aria-controls="offcanvasResponsive">Detalhes da viagem</button>
<div class="container" style="margin: 0 0;">
    <div class="d-flex">
        <div class="form-inline mb-3 d-flex">
            @if (Viagem.StatusViagem == StatusViagem.EmAndamento)
            {
                <div class="dropdown-center dropdown">
                    <AuthorizeView Roles="Funcionario">
                        <button class="btn btn-outline-secondary dropdown-toggle" title="Adicionar despesa" data-bs-toggle="dropdown" aria-expanded="false">
                            Despesas <i class="bi bi-file-earmark-plus-fill"></i>
                        </button>
                    </AuthorizeView>
                    <ul class="dropdown-menu">
                        <li><buttton class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Alimentação, 0))">Alimentação</buttton></li>
                        <li><button class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Deslocamento, 0))">Deslocamento</button></li>
                        <li><button class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Hospedagem, 0))">Hospedagem</button></li>
                        <li><button class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Passagem, 0))">Passagem</button></li>
                    </ul>
                </div>
            }
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle mx-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Filtros <i class="bi bi-filter"></i>
                </button>

                <a class="btn btn-outline-secondary" href="/viagens/@IdViagem/1" type="button">
                    Limpar Filtros <i class="bi bi-eraser"></i>
                </a>
                <ul class="dropdown-menu">
                    <li><a class="btn btn-outline-secondary dropdown-item" href="/viagens/@IdViagem/1/Alimentação">Alimentação</a></li>
                    <li><a class="btn btn-outline-secondary dropdown-item" href="/viagens/@IdViagem/1/Deslocamento">Deslocamento</a></li>
                    <li><a class="btn btn-outline-secondary dropdown-item" href="/viagens/@IdViagem/1/Hospedagem">Hospedagem</a></li>
                    <li><a class="btn btn-outline-secondary dropdown-item" href="/viagens/@IdViagem/1/Passagem">Passagem</a></li>
                    <li class="dropdown-divider"></li>
                    <li><a class="btn btn-outline-secondary dropdown-item" href="/viagens/@IdViagem/@Pagina/">Limpar filtro</a></li>
                </ul>
            </div>
        </div>
        <!--<button class="btn btn-outline-secondary mb-3 mx-2" @onclick="LimparFiltro">Limpar Filtro</button>-->
    </div>

    <div class="row">
        <div class="col-xxl-8 col-xl-6">
            <div class="lista-despesas justify-content-xxl-start">
                <!-- Grid com as Despesas -->
                @if (!DespesasPorPagina.Despesas.Any())
                {
                    <span>Nenhuma despesa foi cadastrada. <br /></span>
                }

                @foreach (var despesa in DespesasPorPagina.Despesas)
                {
                    CoresBordasDespesas.TryGetValue(despesa.TipoDespesa, out string? corBordaDespesa);
                    CoresFundosDespesas.TryGetValue(despesa.TipoDespesa, out string? corFundoDespesa);
                    string nome = despesa.NomeDespesa.Length > 26 ? despesa.NomeDespesa.Substring(0, 26) + "..." : despesa.NomeDespesa;
                    string descricao = despesa.DescricaoDespesa.Length > 38 ? despesa.DescricaoDespesa.Substring(0, 38) + "..." : despesa.DescricaoDespesa;

                    <div class="list-group m-2 despesa-box-shadow">
                        <!--<a href="/viagens/@IdViagem/DetalhesDespesa/@despesa.Id?TipoDespesa=@despesa.TipoDespesa.ToString()" class="list-group-item list-group-item-action" aria-current="true" style="width: 360px; border: 2px solid @corBordaDespesa; background-color:@corFundoDespesa">-->
                        <button @onclick="(() => AbrirFormularioDespesa(despesa.TipoDespesa, despesa.Id))" class="list-group-item list-group-item-action" aria-current="true" style="width: 360px; border: 2px solid @corBordaDespesa; background-color:@corFundoDespesa">
                            <small style="opacity: 70%">@despesa.TipoDespesa.ToString()</small>
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">@nome</h5>
                            </div>
                            <p class="mb-1" style="max-width: 330px;">@descricao</p>
                            <p class="mb-1">Data da despesa: @despesa.DataDespesa</p>
                            <p class="mb-1"><strong>R$@despesa.TotalDespesa</strong></p>
                        </button>
                        <!--</a>-->
                    </div>
                }
            </div>
            @if (DespesasPorPagina.QuantidadeDePaginas > 1)
            {
                @for (int i = 1; i <= DespesasPorPagina.QuantidadeDePaginas; i++)
                {
                    <a class="btn
                    @(i == DespesasPorPagina.PaginaAtual ? "btn-secondary" : "btn-outline-secondary")
                    page-selection" style="margin-right:5px;" href="/viagens/@IdViagem/@i/@TipoDespesa">@i</a>
                }
            }
        </div>

        <!-- Card da Viagem -->
        <div class="col">
            <div class="offcanvas-xl offcanvas-end" tabindex="-1" id="offcanvasResponsive" aria-labelledby="offcanvasResponsiveLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasResponsiveLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#offcanvasResponsive" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <div class="col">
                        <div class="row">
                            <div class="card-viagem m-2">
                                <div class="card-header-viagem px-3">
                                    <h5 class="card-title-viagem">@Viagem.NomeViagem</h5>
                                    <button class="btn btn-edit-viagem" @onclick="AbrirFormularioViagem"><FeatherEdit Size="24" Color="#000" StrokeWidth="1.9f" /></button>
                                </div>
                                <div class="card-body p-3">
                                    <p class="card-text">Descrição: @Viagem.DescricaoViagem</p>
                                    <ul>
                                        <li class="card-text">Funcionário: @Viagem.Funcionario.NomeCompleto</li>
                                        <li class="card-text">Matrícula: @Viagem.Funcionario.Matricula</li>
                                        <li class="card-text">CPF: @Viagem.Funcionario.CPF</li>
                                    </ul>
                                    <span class="card-text">Período: @Viagem.DataInicial.ToString("dd/MM/yyyy") até @Viagem.DataFinal.ToString("dd/MM/yyyy")</span>

                                    <hr />
                                    <div class="card-subtitle">
                                        <span class="card-text">
                                            Adiantamento incial: R$@Viagem.Adiantamento <br />
                                            Total das despesas: R$@Viagem.TotalDespesas <br />
                                            <strong>Subtotal: R$@Subtotal</strong>
                                        </span>
                                    </div>
                                </div>
                                @if (Viagem.StatusViagem == StatusViagem.Aberta)
                                {
                                    <div class="mx-2 d-flex justify-content-center">
                                        <AuthorizeView Roles="Funcionario">
                                            <button class="btn btn-danger mx-1" style="top: 3px;" @onclick="CancelarViagem">Cancelar <i class="bi bi-x-octagon"></i></button>
                                            <button class="btn btn-iniciar-viagem mx-1" style="top: 3px; flex-grow: 1;" @onclick="IniciarViagem">Iniciar <i class="bi bi-play-circle"></i></button>
                                        </AuthorizeView>
                                    </div>
                                }
                                else if (Viagem.StatusViagem == StatusViagem.EmAndamento)
                                {
                                    <div class="mx-2 d-flex justify-content-end">
                                        <AuthorizeView Roles="Funcionario">
                                            <button class="btn btn-danger mx-1" style="top: 3px;" @onclick="EncerrarViagem">Encerrar <i class="bi bi-calendar2-check"></i></button>
                                        </AuthorizeView>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row">
                            @if (Viagem.StatusViagem != StatusViagem.Aberta)
                            {
                                <div class="card-viagem m-2" type="button" data-bs-toggle="collapse" data-bs-target="#resumoDespesas" aria-expanded="false" aria-controls="resumoDespesas">
                                    <div class="accordion accordion-flush" id="accordionTotalDespesasPorCategoria">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button collapsed resumo-despesas-btn" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                                                    Mostrar resumo das despesas
                                                </button>
                                            </h2>
                                            <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionTotalDespesasPorCategoria">
                                                <ul class="list-group list-group-flush">
                                                    <li class="list-group-item"></li>
                                                    @foreach (var despesa in DespesasPorCategoria)
                                                    {
                                                        <li class="list-group-item">
                                                            @despesa.TipoDespesa.ToString() - R$@despesa.TotalDespesa
                                                        </li>
                                                    }
                                                    <li class="list-group-item">
                                                        <strong>Total: R$@Viagem.TotalDespesas</strong>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@if (FormularioViagemAberto)
{
    <div class="modal-overlay" style="z-index:2000">
        <div class="modal-content">
            <ViagemForm IdViagem="IdViagem" FormularioFechado="FecharFormularioViagem" />
        </div>
    </div>
}


@if (FormularioDespesaAberto)
{
    <div class="modal-overlay" style="z-index:2000">
        <div class="modal-content">
            @DespesaForm
        </div>
    </div>
}


@code {
    [Parameter]
    public int IdViagem { get; set; }
    [Parameter]
    public int Pagina { get; set; }
    [Parameter]
    public string? TipoDespesa { get; set; } = null;
    private ViagemDTO Viagem { get; set; } = new();
    //private Funcionario Funcionario { get; set; } = new();
    //private List<DespesaDTO> Despesas { get; set; } = new();
    private string Status { get; set; } = string.Empty;
    //private int TotalDePaginas { get; set; } = 0;
    //private int PaginaAtual { get; set; } = 1;
    private Dictionary<TiposDespesas, string> CoresBordasDespesas = new();
    private Dictionary<TiposDespesas, string> CoresFundosDespesas = new();
    private List<DespesaPorCategoria> DespesasPorCategoria = new();
    private DespesasPorPagina DespesasPorPagina = new() { PaginaAtual = 1, QuantidadeDePaginas = 0 };

    private bool FormularioViagemAberto = false;
    private bool FormularioDespesaAberto = false;

    private decimal Subtotal { get; set; } = 0m;

    private RenderFragment? DespesaForm;

    protected override async Task OnInitializedAsync()
    {
        ViagemService.ViagensChanged += StateHasChanged;

        Viagem = await ViagemService.GetViagem(IdViagem);

        if (Viagem.StatusViagem == StatusViagem.EmAndamento)
            Status = "Em andamento";
        else
            Status = Viagem.StatusViagem.ToString();

        await ObterDespesas();
        //await ObterFuncionario();
        //ObterSubtotal();
        DespesasPorCategoria = await ViagemService.ObterTotalDespesasPorCategoria(IdViagem);

        PopularDictionaries();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ObterDespesas();
    }


    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
    }

    private async Task ObterDespesas()
    {
        /*
        Despesas = await ViagemService.ObterDespesas(Viagem.Id);
        TotalDePaginas = 0;
        PaginaAtual = 1;
        */
        if (TipoDespesa is not null)
        {
            DespesasPorPagina = await ViagemService.ObterTodasDespesasPaginadasPorTipo(IdViagem, Pagina, TipoDespesa);
        }
        else
        {
            DespesasPorPagina = await ViagemService.ObterDespesasPorPagina(IdViagem, Pagina);
        }

        Subtotal = Viagem.Adiantamento - Viagem.TotalDespesas;
    }
    /*
    private async Task ObterFuncionario()
    {

        AuthenticationState usuarioLogado = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimNameIdentifier = usuarioLogado.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        _ = int.TryParse(claimNameIdentifier, out int idFuncionario);
        Console.WriteLine("Id do usuário logado: {0}", idFuncionario);

        Viagem.IdFuncionario = idFuncionario;
        Viagem.Funcionario = await FuncionarioService.GetFuncionario(idFuncionario);

        //Viagem.Funcionario = await ViagemService.GetFuncionario(Viagem.IdFuncionario);
    }
    */
    /*private void ObterSubtotal()
        {
        Subtotal = Viagem.Adiantamento - Viagem.TotalDespesas;
    }*/

    private void AbrirFormularioViagem() => FormularioViagemAberto = true;
    private async Task FecharFormularioViagem()
    {
        FormularioViagemAberto = false;
        Viagem = await ViagemService.GetViagem(IdViagem);
    }

    private void HandleViagem() => Console.WriteLine("Teste viagem.");

    private async Task IniciarViagem()
    {
        bool confirma = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza de que deseja iniciar a viagem?");
        if (confirma)
        {
            await ViagemService.IniciarViagem();
            await JSRuntime.InvokeVoidAsync("alert", ViagemService.Mensagem);
        }
        Viagem = await ViagemService.GetViagem(IdViagem);
    }

    private async Task CancelarViagem()
    {
        bool confirma = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza de que deseja cancelar a viagem?");
        if (confirma)
        {
            await ViagemService.CancelarViagem();
            await JSRuntime.InvokeVoidAsync("alert", ViagemService.Mensagem);
        }
        Viagem = await ViagemService.GetViagem(IdViagem);
    }

    private async Task EncerrarViagem()
    {
        bool confirma = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza de que deseja encerrar a viagem?");
        if (confirma)
        {
            await ViagemService.EncerrarViagem();
            await JSRuntime.InvokeVoidAsync("alert", ViagemService.Mensagem);
        }
        Viagem = await ViagemService.GetViagem(IdViagem);
    }

    private void LimparFiltro()
    {
        NavigationManager.NavigateTo($"/viagens/{IdViagem}/{Pagina}/");
    }
    /*
    private void AbrirFormularioDespesa(int idDespesa, TiposDespesas tipoDespesa)
                {

                switch (tipoDespesa)
                {
                case TiposDespesas.Hospedagem:
                DespesaForm = ObterDespesaForm(idDespesa, typeof(DespesaHospedagemForm), IdViagem);
        break;
        }
        //Console.WriteLine(tipoDespesa);
        FormularioDespesaAberto = true;
        //NavigationManager.NavigateTo($"/viagens/{IdViagem}/DetalhesDespesa/{idDespesa}?TipoDespesa={tipoDespesa}");
    }
    */
    public void AbrirFormularioDespesa(TiposDespesas tipoDespesa, int idDespesa)
    {
        switch (tipoDespesa)
        {
            case TiposDespesas.Hospedagem:
                DespesaForm = ObterDespesaForm(typeof(DespesaHospedagemForm), IdViagem, idDespesa);
                break;
            case TiposDespesas.Deslocamento:
                DespesaForm = ObterDespesaForm(typeof(DespesaDeslocamentoForm), IdViagem, idDespesa);
                break;
            case TiposDespesas.Alimentação:
                DespesaForm = ObterDespesaForm(typeof(DespesaAlimentacaoForm), IdViagem, idDespesa);
                break;
            case TiposDespesas.Passagem:
                DespesaForm = ObterDespesaForm(typeof(DespesaPassagemForm), IdViagem, idDespesa);
                break;
        }

        FormularioDespesaAberto = true;
    }

    public async Task FecharFormularioDespesa()
    {
        FormularioDespesaAberto = false;
        Viagem = await ViagemService.GetViagem(IdViagem);
        await ObterDespesas();
        DespesasPorCategoria = await ViagemService.ObterTotalDespesasPorCategoria(IdViagem);

        DespesaForm = null;
    }

    public RenderFragment ObterDespesaForm(Type tipoDespesa, int idViagem, int idDespesa)
    {
        return builder =>
        {
            builder.OpenComponent(0, tipoDespesa);
            builder.AddAttribute(1, "IdDespesa", idDespesa);
            builder.AddAttribute(2, "IdViagem", idViagem);
            builder.AddAttribute(3, "FormularioFechado", EventCallback.Factory.Create(this, async () =>
            {
                await FecharFormularioDespesa();
            }));
            builder.CloseComponent();
        };
    }


    private void PopularDictionaries()
    {
        CoresBordasDespesas.Add(TiposDespesas.Alimentação, "#27ea11");
        CoresBordasDespesas.Add(TiposDespesas.Deslocamento, "#f8b410");
        CoresBordasDespesas.Add(TiposDespesas.Passagem, "#1848e5");
        CoresBordasDespesas.Add(TiposDespesas.Hospedagem, "#a500c6");

        CoresFundosDespesas.Add(TiposDespesas.Alimentação, "#e6ffe4");
        CoresFundosDespesas.Add(TiposDespesas.Deslocamento, "#fff5e1");
        CoresFundosDespesas.Add(TiposDespesas.Passagem, "#dbe3ff");
        CoresFundosDespesas.Add(TiposDespesas.Hospedagem, "#fae3ff");
    }
}
