@page "/viagens/{idViagem:int}/DetalhesDespesa/{idDespesa:int}"
@inject IDespesasService<DespesaAlimentacaoDTO> DespesaAlimentacaoService
@inject IDespesasService<DespesaPassagemDTO> DespesaPassagemService
@inject IDespesasService<DespesaDeslocamentoDTO> DespesaDeslocamentoService
@inject IViagemService ViagemService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Detalhes - Despesa</PageTitle>

<a href="/viagens/@IdViagem/1" class="btn btn-outline-primary">Voltar</a>


@if (TipoDespesa == string.Empty)
{
    <span>@Mensagem</span>
}
else
{
    if (DespesasComponentes.TryGetValue(TipoDespesa, out var DespesaComponent))
    {
        @DespesaComponent
    }
}


@code {
    [Parameter]
    public int IdViagem { get; set; }
    [Parameter]
    public int IdDespesa { get; set; }
    [Parameter]
    public string TipoDespesa { get; set; } = string.Empty;

    private ViagemDTO Viagem { get; set; } = new();

    private Dictionary<string, RenderFragment> DespesasComponentes = new();

    private string Mensagem { get; set; } = "Carregando despesa ...";

    protected override async Task OnInitializedAsync()
    {
        string tipoDespesa = NavigationManager.Uri.Split('?').LastOrDefault()?.Split('=')?.LastOrDefault() ?? string.Empty;
        TipoDespesa = HttpUtility.UrlDecode(tipoDespesa); //Essa linha formata a string. Por exemplo na Url o valor fica como Alimenta%C3%A7%C3%A3o mas essa linha deixa com o valor correto, Alimentação
        Viagem = await ViagemService.GetViagem(IdViagem);
        PopularDictionaries();
    }

    /*
    private async Task GetDespesaAlimentacao()
    {
        await DespesaAlimentacaoService.GetDespesa(IdDespesa);
        Despesa = DespesaAlimentacaoService.Despesa;
        //ApresentarNoConsole(Despesa);
        Mensagem = DespesaAlimentacaoService.Mensagem;
    }

    private async Task GetDespesaDeslocamento()
    {
        await DespesaDeslocamentoService.GetDespesa(IdDespesa);
        Despesa = DespesaDeslocamentoService.Despesa;
        //ApresentarNoConsole(Despesa);
        Mensagem = DespesaDeslocamentoService.Mensagem;
    }

    private async Task GetDespesaPassagem()
    {
        await DespesaPassagemService.GetDespesa(IdDespesa);
        Despesa = DespesaPassagemService.Despesa;
        //ApresentarNoConsole(Despesa);
        Mensagem = DespesaPassagemService.Mensagem;
    }
    */


    private void PopularDictionaries()
    {
        DespesasComponentes.Add("Hospedagem", builder =>
        {
            builder.OpenComponent(0, typeof(DespesaHospedagemDetalhes));
            builder.AddAttribute(1, "IdDespesa", IdDespesa);
            builder.AddAttribute(2, "StatusDaViagem", Viagem.StatusViagem.ToString());
            builder.CloseComponent();
        });


        //DespesasComponentes.Add("Deslocamento", builder => { builder.OpenComponent<DespesaDeslocamentoForm>(0); builder.CloseComponent(); });
        //DespesasComponentes.Add("Passagem", builder => { builder.OpenComponent<DespesaPassagemForm>(0); builder.CloseComponent(); });
        //DespesasComponentes.Add("Alimentacao", builder => { builder.OpenComponent<DespesaAlimentacaoForm>(0); builder.CloseComponent(); });
    }
}
