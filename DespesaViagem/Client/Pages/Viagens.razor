@page "/viagens"
@inject NavigationManager NavigationManager
@inject IViagemService ViagemService
@inject IGestorService GestorService
@inject IAdminService AdminService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@attribute [Authorize]

<PageTitle>Viagens</PageTitle>


<h3>Viagens</h3>
<br />
<AuthorizeView Roles="Funcionario">
    @if (!PossuiViagemAbertaOuEmAndamento)
    {
        <button class="btn btn-add-viagem" @onclick="AbrirFormulario">
            Adicionar <i class="bi bi-suitcase-lg"></i>
        </button>
    }
</AuthorizeView>

<AuthorizeView Roles="Gestor, Administrador">
    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        Filtro <i class="bi bi-funnel"></i>
    </button>
    <ul class="dropdown-menu">
        @foreach (var funcionario in Funcionarios)
        {
            <li><button @onclick="(() => ObterDespesasFuncionario(funcionario.Id))" class="btn btn-outline-secondary dropdown-item">@funcionario.Username</button></li>
        }
        <li class="dropdown-divider"></li>
        <li><button @onclick="(() => ObterDespesasFuncionario(0))" class="btn btn-outline-secondary dropdown-item">Limpar filtro</button></li>
    </ul>
</AuthorizeView>

<div class="d-flex card-container-viagens">
    <div class="card-container" style="flex-wrap:wrap">
        <ExibirViagens />
    </div>

    @if (FormularioAberto)
    {
        <div class="modal-overlay">            
            <div class="modal-content">
                <ViagemForm IdViagem="0" FormularioFechado="FecharFormulario" />
            </div>
        </div>
    }
</div>


@code {
    //private IEnumerable<Viagem> TodasViagens { get; set; } = new List<Viagem>();
    private bool FormularioAberto = false;
    private bool PossuiViagemAbertaOuEmAndamento = false;

    private List<FuncionarioDTO> Funcionarios = new();

    protected override async Task OnInitializedAsync()
    {
        /*var usuario = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string tipoDeUsuario = usuario.User.FindFirst(ClaimTypes.Role).Value.ToString() ?? string.Empty;
        */
        string tipoDeUsuario = (await AuthenticationStateProvider.GetAuthenticationStateAsync())
        .User.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Role).Value;

        if (!tipoDeUsuario.Contains(RolesUsuario.Funcionario.ToString()))
            await ObterListaFuncionarios(tipoDeUsuario);

        await ViagemService.GetViagens();
        PossuiViagemAbertaOuEmAndamento = await FuncionarioPossuiViagemEmAndamentoOuAberta();

        ViagemService.ViagensChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
    }

    private async Task ObterListaFuncionarios(string tipoDeUsuario)
    {       
        if (tipoDeUsuario.Contains(RolesUsuario.Administrador.ToString()))
            Funcionarios = await AdminService.ObterListaDeFuncionarios();
        else if (tipoDeUsuario.Contains(RolesUsuario.Gestor.ToString()))
            Funcionarios = await GestorService.ObterListaDeFuncionarios();

        Console.WriteLine(Funcionarios.Count);
    }

    private async Task ObterDespesasFuncionario(int idFuncionario)
    {
        if (idFuncionario == 0)
            await ViagemService.GetViagens();
        else
            await ViagemService.GetViagens(idFuncionario);
    }

    private async Task<bool> FuncionarioPossuiViagemEmAndamentoOuAberta()
    {
        var usuario = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string idUsuario = usuario.User.FindFirst(ClaimTypes.NameIdentifier).Value.ToString() ?? "0";
        if (ViagemService.Viagens.Any())
        {
            ViagemService.Viagens.ForEach(v => Console.WriteLine(v.StatusViagem.ToString()));
            return ViagemService.Viagens
                .Any(v => v.StatusViagem == StatusViagem.EmAndamento || v.StatusViagem == StatusViagem.Aberta);
        }
        else
            return false;
    }

    private void AbrirFormulario() => FormularioAberto = true;

    private async Task FecharFormulario() {        
        FormularioAberto = false; 
        await ViagemService.GetViagens();
    } 
}
