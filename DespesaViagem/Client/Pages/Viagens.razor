@page "/viagens/{Pagina:int}"
@page "/viagens/PorFuncionario/{IdFuncionario:int}/{Pagina:int}"
@page "/viagens/PorDepartamento/{IdDepartamento:int}/{Pagina:int}"
@inject NavigationManager NavigationManager
@inject IViagemService ViagemService
@inject IGestorService GestorService
@inject IAdminService AdminService
@inject IDepartamentoService DepartamentoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@attribute [Authorize]

<PageTitle>Viagens</PageTitle>


<h3>Viagens</h3>
<br />
<AuthorizeView Roles="Funcionario">
    @if (!PossuiViagemAbertaOuEmAndamento)
    {
        <button class="btn btn-add-viagem" @onclick="AbrirFormulario">
            Adicionar <i class="bi bi-suitcase-lg"></i>
        </button>
    }
</AuthorizeView>

<AuthorizeView Roles="Gestor, Administrador">
    <!--
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Filtro <i class="bi bi-funnel"></i>
        </button>
        <ul class="dropdown-menu">
    @foreach (var funcionario in Funcionarios)
    {
                <li><button @onclick="(() => ObterViagensFuncionario(funcionario.Id))" class="btn btn-outline-secondary dropdown-item">@funcionario.Username</button></li>
    }
            <li class="dropdown-divider"></li>
            <li><button @onclick="(() => ObterViagensFuncionario(0))" class="btn btn-outline-secondary dropdown-item">Limpar filtro</button></li>
        </ul>

    -->
    <button class="btn btn-outline-secondary mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFiltros" aria-expanded="false" aria-controls="collapseFiltros">
        Filtro <i class="bi bi-funnel"></i>
    </button>

    <div class="btn-group-horizontal collapse" id="collapseFiltros" role="group">
        <div class="btn-group-horizontal" role="group" aria-label="Vertical button group">
            <div class="btn-group" role="group">

                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    @UsernameFiltro
                </button>
                <ul class="dropdown-menu">
                    @foreach (var funcionario in Funcionarios)
                    {
                        <li><button @onclick="(() => ObterViagensFuncionario(funcionario.Id, funcionario.Username))" class="btn btn-outline-secondary dropdown-item">@funcionario.Username</button></li>
                    }
                    <li class="dropdown-divider"></li>
                    <li><button @onclick="(() => ObterViagensFuncionario(0, string.Empty))" class="btn btn-outline-secondary dropdown-item">Limpar filtro</button></li>
                </ul>
            </div>

            <div class="btn-group" role="group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    @DepartamentoFiltro
                </button>
                <ul class="dropdown-menu">
                    @foreach (var departamento in Departamentos)
                    {
                        <li><button @onclick="(() => ObterViagensDepartamento(departamento.Id, departamento.Descricao))" class="btn btn-outline-secondary dropdown-item">@departamento.Descricao</button></li>
                    }
                    <li class="dropdown-divider"></li>
                    <li><button @onclick="(() => ObterViagensDepartamento(0, string.Empty))" class="btn btn-outline-secondary dropdown-item">Limpar filtro</button></li>
                </ul>
            </div>
            <!--
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Dropdown
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#">Dropdown link</a></li>
                    <li><a class="dropdown-item" href="#">Dropdown link</a></li>
                </ul>
            </div>
            -->
        </div>
    </div>

</AuthorizeView>

<div class="d-flex card-container-viagens">

    <div class="card-container" style="flex-wrap:wrap">
        <ExibirViagens Pagina="Pagina" Filtro="filtro" />
    </div>

    @if (FormularioAberto)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <ViagemForm IdViagem="0" FormularioFechado="FecharFormulario" />
            </div>
        </div>
    }
</div>


@if (ViagemService.ViagensPorPagina.QuantidadeDePaginas > 1)
{
    <div class="mt-2">
        @for (int i = 1; i <= ViagemService.ViagensPorPagina.QuantidadeDePaginas; i++)
        {
            int pagina = i;
            <button class="btn
                    @(pagina == ViagemService.ViagensPorPagina.PaginaAtual ? "btn-secondary" : "btn-outline-secondary") page-selection" @onclick="(() => MudarPagina(pagina))">
                @pagina
            </button>
        }
    </div>
}


@code {
    [Parameter]
    public int Pagina { get; set; } = 0;

    [Parameter]
    public int IdFuncionario { get; set; } = 0;

    [Parameter]
    public int IdDepartamento { get; set; } = 0;

    private string DepartamentoFiltro { get; set; } = "Departamentos";
    private string UsernameFiltro { get; set; } = "Funcionários";
    public string filtro = string.Empty;

    //private IEnumerable<Viagem> TodasViagens { get; set; } = new List<Viagem>();
    private bool FormularioAberto = false;
    private bool PossuiViagemAbertaOuEmAndamento = false;

    private List<FuncionarioDTO> Funcionarios = new();
    private List<Departamento> Departamentos = new();

    protected override async Task OnInitializedAsync()
    {
        DepartamentoService.DepartamentosChanged += StateHasChanged;
        ViagemService.ViagensChanged += StateHasChanged;

        /*var usuario = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string tipoDeUsuario = usuario.User.FindFirst(ClaimTypes.Role).Value.ToString() ?? string.Empty;
        */
        string tipoDeUsuario = (await AuthenticationStateProvider.GetAuthenticationStateAsync())
        .User.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Role).Value;

        if (!tipoDeUsuario.Contains(RolesUsuario.Funcionario.ToString()))
        {
            await ObterListaFuncionarios(tipoDeUsuario);
            await ObterDepartamentos();
        }

        //await ViagemService.GetViagens();

        await ObterViagens();

        PossuiViagemAbertaOuEmAndamento = await FuncionarioPossuiViagemEmAndamentoOuAberta();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ObterViagens();
    }

    public void Dispose()
    {
        DepartamentoService.DepartamentosChanged -= StateHasChanged;
        ViagemService.ViagensChanged -= StateHasChanged;
    }

    private void MudarPagina(int pagina)
    {
        NavigationManager.NavigateTo($"/viagens{filtro}/{pagina}");
        /*
        List<ViagemDTO> viagens = ViagemService.ViagensPorPagina.Viagens;

        float viagensPorPagina = 6f;

        double quantidadeDePaginas = Math.Ceiling(viagens.Count / viagensPorPagina);
            viagens = viagens
            .Skip((pagina - 1) * (int)viagensPorPagina)
            .Take((int)viagensPorPagina)
        .ToList();

        ViagemService.ViagensPorPagina.Viagens = viagens;
        ViagemService.ViagensPorPagina.PaginaAtual = pagina;
        */
        StateHasChanged();
    }

    private async Task ObterViagens()
    {
        if (IdFuncionario > 0)
            await ViagemService.GetViagensPorFuncionario(IdFuncionario, Pagina);        
        else if (IdDepartamento > 0)
            await ViagemService.GetViagensPorDepartamento(IdDepartamento, Pagina);
        else
            await ViagemService.GetViagens(Pagina);        
    }

    private async Task ObterListaFuncionarios(string tipoDeUsuario)
    {
        if (tipoDeUsuario.Contains(RolesUsuario.Administrador.ToString()))
            Funcionarios = await AdminService.ObterListaDeFuncionarios();
        else if (tipoDeUsuario.Contains(RolesUsuario.Gestor.ToString()))
            Funcionarios = await GestorService.ObterListaDeFuncionarios();

        //Console.WriteLine(Funcionarios.Count);
    }

    private async Task ObterViagensFuncionario(int idFuncionario, string username)
    {
        /*
        if (idFuncionario == 0)
            await ViagemService.GetViagens();
            else
            await ViagemService.GetViagensPorFuncionario(idFuncionario);
        */
        IdFuncionario = idFuncionario;
        UsernameFiltro = username == string.Empty ? "Funcionários" : username;
        DepartamentoFiltro = "Departamentos";
        if (idFuncionario == 0)
        {
            filtro = string.Empty;
            await ViagemService.GetViagens(Pagina);
        }
        else
        {
            Pagina = 1;
            filtro = $"/PorFuncionario/{IdFuncionario}";
            await ViagemService.GetViagensPorFuncionario(idFuncionario, Pagina);            
        }
        MudarPagina(Pagina);

    }

    private async Task ObterDepartamentos()
    {
        var result = await DepartamentoService.ObterDepartamentos();
        if (result.IsSuccess)
            Departamentos = result.Value.ToList();
    }

    private async Task ObterViagensDepartamento(int idDepartamento, string departamento)
    {
        /*
        if (idDepartamento == 0)
            await ViagemService.GetViagens();
            else
            await ViagemService.GetViagensPorDepartamento(idDepartamento);
        */
        IdDepartamento = idDepartamento;
        DepartamentoFiltro = departamento == string.Empty ? "Departamentos" : departamento;
        UsernameFiltro = "Funcionários";
        if (idDepartamento == 0)
        {
            filtro = string.Empty;
            await ViagemService.GetViagens(Pagina);
        }
        else
        {
            Pagina = 1;
            filtro = $"/PorDepartamento/{IdDepartamento}";
            await ViagemService.GetViagensPorDepartamento(idDepartamento, Pagina);
        }
        MudarPagina(Pagina);
    }

    private async Task<bool> FuncionarioPossuiViagemEmAndamentoOuAberta()
    {
        var usuario = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string idUsuario = usuario.User.FindFirst(ClaimTypes.NameIdentifier).Value.ToString() ?? "0";
        if (ViagemService.Viagens.Any())
        {
            ViagemService.Viagens.ForEach(v => Console.WriteLine(v.StatusViagem.ToString()));
            return ViagemService.Viagens
                .Any(v => v.StatusViagem == StatusViagem.EmAndamento || v.StatusViagem == StatusViagem.Aberta);
        }
        else
            return false;
    }

    private void AbrirFormulario() => FormularioAberto = true;

    private async Task FecharFormulario()
    {
        FormularioAberto = false;
        await ViagemService.GetViagens();
    }
}
