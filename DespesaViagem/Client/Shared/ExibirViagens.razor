@inject IViagemService ViagemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (ViagemService.Viagens == null || !ViagemService.Viagens.Any())
{
    <span>@ViagemService.Mensagem</span>
}
else
{
    @foreach (var viagem in ViagemService.Viagens)
    {
        string descricao = viagem.DescricaoViagem;
        string opacidade = OpacidadeStatus.GetValueOrDefault(viagem.StatusViagem) ?? string.Empty;
        string statusViagem = viagem.StatusViagem.ToString();
        if (descricao.Length > 60)
            descricao = descricao.Substring(0, 60) + "...";
        /*
        if (viagem.StatusViagem == StatusViagem.Aberta || viagem.StatusViagem == StatusViagem.EmAndamento)
            opacidade = "100%";
        else
            opacidade = "50%";
        */

        if (viagem.StatusViagem == StatusViagem.EmAndamento) statusViagem = "Em andamento";


        <div class="card" style="opacity:@opacidade">
            <AuthorizeView Roles="Gestor, Administrador">
                <small class="nome-funcionario">@viagem.Funcionario.NomeCompleto</small>
            </AuthorizeView>
            <h2 class="card-header title">@viagem.NomeViagem <button class="btn-exibir-despesas" title="Detalhes da viagem" @onclick="() => VerDetalhesViagem(viagem.Id)"><FeatherList Size="24" Color="#000" StrokeWidth="1.7f" /></button></h2>
            <div>
                <h4 class="card-title">Status da viagem: @statusViagem</h4>
                <hr />
                <!--<h5 class="card-subtitle">Informações sobre a viagem:</h5>-->
                <p class="card-subtitle">Descrição da viagem: @descricao</p>
                <hr />
                <ul>
                    <li class="card-text">De: @viagem.DataInicial.ToString("dd/MM/yyyy")</li>
                    <li class="card-text">Até: @viagem.DataFinal.ToString("dd/MM/yyyy")</li>
                    <!--<li>Adiantamento incial: @viagem.Adiantamento</li>-->
                </ul>
                @if (viagem.StatusViagem == StatusViagem.EmAndamento)
                {
                    <div class="dropup-center dropup">
                        <AuthorizeView Roles="Funcionario">
                            <button class="btn-add-despesas round-button" title="Adicionar despesa" data-bs-toggle="dropdown" aria-expanded="false">
                                <FeatherPlus Size="24" Color="#000" StrokeWidth="1.7f" />
                            </button>
                        </AuthorizeView>
                        <ul class="dropdown-menu">
                            <li><buttton class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Alimentação, viagem.Id))">Alimentação</buttton></li>
                            <li><button class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Deslocamento, viagem.Id))">Deslocamento</button></li>
                            <li><button class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Hospedagem, viagem.Id))">Hospedagem</button></li>
                            <li><button class="dropdown-item" @onclick="(() => AbrirFormularioDespesa(TiposDespesas.Passagem, viagem.Id))">Passagem</button></li>
                        </ul>
                    </div>
                }
                else if (viagem.StatusViagem == StatusViagem.Aberta)
                {
                    <AuthorizeView Roles="Funcionario">
                        <div style="float:right;">
                            <button class="btn btn-outline-dark" @onclick="IniciarViagem">Iniciar viagem</button>
                        </div>
                    </AuthorizeView>

                }
            </div>
        </div>
    }
}

@if (FormularioDespesaAberto)
{
    <div class="modal-overlay" style="z-index:2000">
        <div class="modal-content">
            @DespesaForm
        </div>
    </div>
}


@code {
    private Dictionary<StatusViagem, string> OpacidadeStatus { get; set; } = new();

    private bool FormularioDespesaAberto = false;

    private RenderFragment? DespesaForm;

    protected override void OnInitialized()
    {
        ViagemService.ViagensChanged += StateHasChanged;

        OpacidadeStatus.Add(StatusViagem.Encerrada, "50%");
        OpacidadeStatus.Add(StatusViagem.Cancelada, "50%");
        OpacidadeStatus.Add(StatusViagem.Aberta, "100%");
        OpacidadeStatus.Add(StatusViagem.EmAndamento, "100%");
    }

    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
    }

    private void VerDetalhesViagem(int idViagem)
    {
        /*
        if ((await ViagemService.ObterDespesas(idViagem)).Count() > 0)
            NavigationManager.NavigateTo($"/viagens/{idViagem}");
            else
            await JSRuntime.InvokeVoidAsync("alert", "Adicione alguma despesa para a viagem primeiro!");
        */

        NavigationManager.NavigateTo($"/viagens/{idViagem}/1");
    }

    /*
    private void AdicionarDespesa(int idViagem)
        {
        NavigationManager.NavigateTo($"/viagens/adicionar-despesa/{idViagem}");
    }
    */

    private void AbrirFormularioDespesa(TiposDespesas tipoDespesa, int idViagem)
    {
        FormularioDespesaAberto = true;
        switch (tipoDespesa)
        {
            case TiposDespesas.Hospedagem:
                DespesaForm = ObterDespesaForm(typeof(DespesaHospedagemForm), idViagem, 0);
                break;
            case TiposDespesas.Deslocamento:
                DespesaForm = ObterDespesaForm(typeof(DespesaDeslocamentoForm), idViagem, 0);
                break;
            case TiposDespesas.Alimentação:
                DespesaForm = ObterDespesaForm(typeof(DespesaAlimentacaoForm), idViagem, 0);
                break;
            case TiposDespesas.Passagem:
                DespesaForm = ObterDespesaForm(typeof(DespesaPassagemForm), idViagem, 0);
                break;
        }

        FormularioDespesaAberto = true;
    }

    private void FecharFormularioDespesa(int idViagem)
    {
        FormularioDespesaAberto = false;
        DespesaForm = null;
        NavigationManager.NavigateTo($"/viagens");
    }

    private async Task IniciarViagem()
    {
        bool confirma = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza de que deseja continuar?");
        if (confirma)
        {
            await ViagemService.IniciarViagem();
            await JSRuntime.InvokeVoidAsync("alert", ViagemService.Mensagem);
        }
    }

    public RenderFragment ObterDespesaForm(Type tipoDespesa, int idViagem, int idDespesa)
    {
        return builder =>
        {
            builder.OpenComponent(0, tipoDespesa);
            builder.AddAttribute(1, "IdDespesa", idDespesa);
            builder.AddAttribute(2, "IdViagem", idViagem);
            builder.AddAttribute(3, "FormularioFechado", EventCallback.Factory.Create(this, () =>
            {
                FecharFormularioDespesa(idViagem);
            }));
            builder.CloseComponent();
        };
    }

}