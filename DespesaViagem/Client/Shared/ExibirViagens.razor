@inject IViagemService ViagemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (ViagemService.Viagens == null || !ViagemService.Viagens.Any())
{
    <span>@ViagemService.Mensagem</span>
}
else
{
    @foreach (var viagem in ViagemService.Viagens)
    {
        string descricao = viagem.DescricaoViagem;
        string opacidade = OpacidadeStatus.GetValueOrDefault(viagem.StatusViagem) ?? string.Empty;
        string statusViagem = viagem.StatusViagem.ToString();
        if (descricao.Length > 60)
            descricao = descricao.Substring(0, 60) + "...";
        /*
        if (viagem.StatusViagem == StatusViagem.Aberta || viagem.StatusViagem == StatusViagem.EmAndamento)
            opacidade = "100%";
        else
            opacidade = "50%";
        */

        if (viagem.StatusViagem == StatusViagem.EmAndamento) statusViagem = "Em andamento";

        
        <div class="card" style="opacity:@opacidade">
            <h2 class="card-header title">@viagem.NomeViagem <button class="btn-exibir-despesas" title="Detalhes da viagem" @onclick="() => VerDetalhes(viagem.Id)"><FeatherList Size="24" Color="#000" StrokeWidth="1.7f" /></button></h2>
            <div>
                <h4 class="card-title">Status da viagem: @statusViagem</h4>
                <hr />
                <!--<h5 class="card-subtitle">Informações sobre a viagem:</h5>-->
                <p class="card-subtitle">Descrição da viagem: @descricao</p>
                <hr />
                <ul>
                    <li class="card-text">De: @viagem.DataInicial.ToString("dd/MM/yyyy")</li>
                    <li class="card-text">Até: @viagem.DataFinal.ToString("dd/MM/yyyy")</li>
                    <!--<li>Adiantamento incial: @viagem.Adiantamento</li>-->
                </ul>
                @if (viagem.StatusViagem == StatusViagem.EmAndamento)
                {
                    <div class="dropup-center dropup">
                        <button class="btn-add-despesas round-button" title="Adicionar despesa" data-bs-toggle="dropdown" aria-expanded="false">
                            <FeatherPlus Size="24" Color="#000" StrokeWidth="1.7f" />
                        </button>
                        <ul class="dropdown-menu">                                                        
                            <li><a class="dropdown-item">Alimentação</a></li>
                            <li><a class="dropdown-item">Deslocamento</a></li>
                            <li><a class="dropdown-item" href="/viagens/adicionar-despesa/@viagem.Id?TipoDespesa=Hospedagem">Hospedagem</a></li>
                            <li><a class="dropdown-item">Passagem</a></li>
                        </ul>
                    </div>
                }

            </div>
        </div>
    }

}
@code {
    private Dictionary<StatusViagem, string> OpacidadeStatus { get; set; } = new();
    protected override void OnInitialized()
    {
        ViagemService.ViagensChanged += StateHasChanged;

        OpacidadeStatus.Add(StatusViagem.Encerrada, "50%");
        OpacidadeStatus.Add(StatusViagem.Cancelada, "50%");
        OpacidadeStatus.Add(StatusViagem.Aberta, "100%");
        OpacidadeStatus.Add(StatusViagem.EmAndamento, "100%");
    }

    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
    }

    private void VerDetalhes(int idViagem)
    {
        /*
        if ((await ViagemService.ObterDespesas(idViagem)).Count() > 0)
            NavigationManager.NavigateTo($"/viagens/{idViagem}");
        else
            await JSRuntime.InvokeVoidAsync("alert", "Adicione alguma despesa para a viagem primeiro!");
        */
        NavigationManager.NavigateTo($"/viagens/{idViagem}/1");
    }

    private void AdicionarDespesa(int idViagem)
    {
        NavigationManager.NavigateTo($"/viagens/adicionar-despesa/{idViagem}");
    }
}