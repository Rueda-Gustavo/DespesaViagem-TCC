@inject IViagemService ViagemService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<PageTitle>@AdicionarOuEditar - Viagem</PageTitle>

<div class="modal-header">
    <h5 class="modal-title">
        <span>@AdicionarOuEditar Viagem</span>         
    </h5>
    <button type="button" class="close" @onclick="FecharFormulario">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div class="modal-body">
    <form @onsubmit="HandleViagem">
        <div class="form-group row">
            <div class="col">
                <label for="NomeViagem">Nome da Viagem</label>
                <input id="NomeViagem" class="form-control" @bind="Viagem.NomeViagem" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                <label for="DescricaoViagem">Descrição da Viagem</label>
                <textarea id="DescricaoViagem" class="form-control" @bind="Viagem.DescricaoViagem" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                <label for="DataInicial">Data Inicial</label>
                <input id="DataInicial" type="date" class="form-control" @bind="Viagem.DataInicial" />
            </div>
            <div class="col">
                <label for="DataFinal">Data Final</label>
                <input id="DataFinal" type="date" class="form-control" @bind="Viagem.DataFinal" />
            </div>
            <div class="col">
                <label for="Adiantamento">Adiantamento</label>
                <input id="Adiantamento" class="form-control" onkeypress="$(this).inputmask('currency')" @bind-value="Viagem.Adiantamento" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col">
                <label for="Nome">Nome</label>
                <input id="Nome" class="form-control" @bind-value="Viagem.Funcionario.NomeCompleto" readonly />
            </div>            
            <div class="form-group row">

                <div class="col">
                <label for="Username">Username</label>
                    <input id="Username" class="form-control" @bind-value="Viagem.Funcionario.Username" readonly />
            </div>
                <div class="col">
                <label for="CPF">CPF</label>
                    <input id="CPF" class="form-control" @bind-value="Viagem.Funcionario.CPF" readonly />
            </div>
                <div class="col">
                <label for="Matricula">Matrícula</label>
                    <input id="Matricula" class="form-control" @bind-value="Viagem.Funcionario.Matricula" readonly />
            </div>
            </div>
        </div>
        <div style="float:right;">
            <button type="button" class="btn btn-secondary mx-2" @onclick="FecharFormulario">
                <span>Cancelar</span>
            </button>
            <button type="submit" class="btn btn-primary">
                <span>@AdicionarOuEditar</span>
            </button>
        </div>
    </form>

</div>

@code {
    [Parameter]
    public int IdViagem { get; set; } = 0;

    [Parameter]
    public EventCallback FormularioFechado { get; set; }

    private ViagemDTO Viagem { get; set; } = new();
    //private Funcionario Funcionario = new();
    private bool Adicionar = true;
    private string AdicionarOuEditar = "Adicionar";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState usuarioLogado = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimNameIdentifier = usuarioLogado.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        _ = int.TryParse(claimNameIdentifier, out int idFuncionario);
        Console.WriteLine("Id do usuário logado: {0}", idFuncionario);

        Viagem.IdFuncionario = idFuncionario;
        Viagem.Funcionario = await ViagemService.GetFuncionario(idFuncionario);

        ViagemService.ViagensChanged += StateHasChanged;
        if (IdViagem > 0)
        {
            Adicionar = false;
            await GetViagem();
        }

        if (!Adicionar) AdicionarOuEditar = "Editar";
    }

    public void Dispose()
    {
        ViagemService.ViagensChanged -= StateHasChanged;
    }

    private async Task FecharFormulario()
    {
        await FormularioFechado.InvokeAsync();
    }

    private async Task GetViagem()
    {
        Viagem = await ViagemService.GetViagem(IdViagem);
        //Funcionario = await ViagemService.GetFuncionario(Viagem.IdFuncionario);
    }

    private async Task HandleViagem()
    {
        try
        {
            if (Adicionar)
                await ViagemService.AdicionarViagem(Viagem);
            else
                await ViagemService.AtualizarViagem(Viagem);
            await JSRuntime.InvokeVoidAsync("alert",ViagemService.Mensagem);
            //await JSRuntime.InvokeVoidAsync("alert", "Dados salvos com sucesso!");
            await FecharFormulario();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message + "\n" + ViagemService.Mensagem);
        }
    }
}
