@inject IDespesasService<DespesaAlimentacaoDTO> DespesaAlimentacaoService
@inject IViagemService ViagemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>@AdicionarOuEditar - Despesa com Alimentação</PageTitle>


<div class="modal-header">
    <h5 class="modal-title">@AdicionarOuEditar Despesa</h5>
    <button type="button" class="close" @onclick="FecharFormulario">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div class="modal-body">
    <EditForm Model="Despesa" OnValidSubmit="HandleDespesa">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <div class="col">
                <label for="NomeDespesa">Nome da Despesa</label>
                <InputText id="NomeDespesa" class="form-control" @bind-Value="Despesa.NomeDespesa" />
                <ValidationMessage For="@(() => Despesa.NomeDespesa)" />
            </div>
            <div class="col-auto">
                <label for="DataDespesa">Data da Despesa</label>
                <InputDate id="DataDespesa" style="max-width:12rem" class="form-control" @bind-Value="Despesa.DataDespesa" />
                <ValidationMessage For="@(() => Despesa.DataDespesa)" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                <label for="DescricaoDespesa">Descrição da Despesa</label>
                <InputTextArea id="DescricaoDespesa" class="form-control" @bind-Value="Despesa.DescricaoDespesa" />
                <ValidationMessage For="@(() => Despesa.DescricaoDespesa)" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col">
                <label for="NomeEstabelecimento">Nome do estabelecimento</label>
                <InputText id="NomeEstabelecimento" class="form-control" @bind-Value="Despesa.NomeEstabelecimento" />
                <ValidationMessage For="@(() => Despesa.NomeEstabelecimento)" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-auto">
                <label for="CNPJ">CNPJ</label>
                <InputText id="CNPJ" class="form-control" @bind-Value="Despesa.CNPJ" />
                <ValidationMessage For="@(() => Despesa.CNPJ)" />
            </div>
            <div class="col-auto">
                <label for="ValorRefeicao">Valor da Refeição</label>
                <InputNumber id="ValorRefeicao" class="form-control" min="0.00" max="10000.00" step="0.01" style="max-width:5rem" @bind-Value="Despesa.ValorRefeicao" />
                <ValidationMessage For="@(() => Despesa.ValorRefeicao)" />
            </div>            
        </div>

        <div class="form-group row">
            <div class="col-auto">
                <label for="Recibo" class="form-label">Recibo</label>
                <input class="form-control" type="file" id="Recibo">
            </div>
        </div>

        <div style="float:right;">
            <button type="button" class="btn btn-secondary mx-2" @onclick="FecharFormulario">
                <span>Cancelar</span>
            </button>

            <AuthorizeView Context="authorizeViewContext" Roles="Funcionario">
                @if (viagem.StatusViagem == StatusViagem.EmAndamento)
                {
                    <button type="submit" class="btn btn-primary">
                        <span>@AdicionarOuEditar</span>
                    </button>
                }
            </AuthorizeView>

        </div>
    </EditForm>
</div>
@code {
    [Parameter]
    public int IdDespesa { get; set; }
    [Parameter]
    public int IdViagem { get; set; }
    private bool Adicionar = true;
    private string AdicionarOuEditar = "Adicionar";
    private ViagemDTO viagem = new();

    private DespesaAlimentacaoDTO Despesa { get; set; } = new();

    [Parameter]
    public EventCallback FormularioFechado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DespesaAlimentacaoService.DespesasChanged += StateHasChanged;
        viagem = await ViagemService.GetViagem(IdViagem);

        if (IdDespesa > 0)
        {
            Adicionar = false;
            await GetDespesaHospedagem();
        }

        if (!Adicionar) AdicionarOuEditar = "Editar";
    }

    public void Dispose()
    {
        DespesaAlimentacaoService.DespesasChanged -= StateHasChanged;
    }

    private async Task FecharFormulario()
    {
        await FormularioFechado.InvokeAsync();
    }

    private async Task GetDespesaHospedagem()
    {
        var response = await DespesaAlimentacaoService.GetDespesa(IdDespesa);
        if (!response.IsSuccess)
            await JSRuntime.InvokeVoidAsync("alert", $"{response.Error}");

        Despesa = response.Value;

        //await EnderecoService.GetEndereco(Despesa.IdEndereco);
        //Endereco = EnderecoService.Endereco;
    }

    private async Task HandleDespesa()
    {
        try
        {
            Result<DespesaAlimentacaoDTO> despesa = new();
            Despesa.IdViagem = IdViagem;

            if (Adicionar && await JSRuntime.InvokeAsync<bool>("confirm", "Deseja prosseguir com o cadastro?"))
                despesa = await DespesaAlimentacaoService.AdicionarDespesa(Despesa);
            else if (await JSRuntime.InvokeAsync<bool>("confirm", "Deseja salvar as alterações?"))
                despesa = await DespesaAlimentacaoService.AtualizarDespesa(Despesa);

            if (despesa.IsSuccess) await FecharFormulario();
            else await JSRuntime.InvokeVoidAsync("alert", despesa.Error);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message + "\n" + DespesaAlimentacaoService.Mensagem);
        }
    }
}
