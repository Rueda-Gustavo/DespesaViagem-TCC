@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<button id="btnObterUsername" class="d-none" @onclick="ObterUsername" disabled hidden></button>


<div class="btn-group dropdown">
    <button @onclick="ToggleMenuUsuario"
    @onfocusout="EsconderMenuUsuario"
            class="btn btn-secondary dropdown-toggle botao-usuario mx-3">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @CssClassBotaoUsuario">
        <span class="username font-monospace mb-1" id="username" style="margin-left: 0;width: 100%;">@username</span>
        <AuthorizeView>
            <Authorized>                
                <a href="/perfil" class="dropdown-item mb-1 btn-usuario" style="margin-left: 0;max-width: 7.5rem;">Perfil</a>
                <BotaoAdmin />                                
                <button class="dropdown-item btn-usuario mt-1" @onclick="Logout" style="margin-left: 0;max-width: 7.5rem;">Logout</button>                
            </Authorized>
            <NotAuthorized>
                <a href="/login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item btn-usuario mb-1" style="margin-left: 0; max-width: 7.5rem;">Login</a>
                <a href="/cadastro" class="dropdown-item btn-usuario" style="margin-left: 0; max-width: 7.5rem;">Cadastrar</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code {
    private bool mostrarMenuUsuario = false;

    private string CssClassBotaoUsuario => mostrarMenuUsuario ? "show-menu" : string.Empty;

    private string username = string.Empty;

    private void ToggleMenuUsuario()
    {
        mostrarMenuUsuario = !mostrarMenuUsuario;
    }

    private async Task EsconderMenuUsuario()
    {
        await Task.Delay(200);
        mostrarMenuUsuario = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("tokenJwt");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = string.Empty;
        StateHasChanged();
        NavigationManager.NavigateTo("");
    }
    protected override async Task OnInitializedAsync()
    {
        await ObterUsername();
    }

    private async Task ObterUsername()
    {
        ClaimsPrincipal usuarioLogado = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (usuarioLogado is not null && usuarioLogado.Identity.IsAuthenticated)
            username = usuarioLogado.FindFirst(ClaimTypes.Name).Value;

        Console.WriteLine(username);
        StateHasChanged();
    }
}
